<?php

namespace App\Http\Controllers\api;

use App\Http\Controllers\Controller;
use App\Models\Competition;
use App\Models\CompetitionPartner;
use App\Models\School;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use \Illuminate\Database\QueryException;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Hash;
use App\Models\Participants;
use App\Models\Countries;
use App\Models\User;
use App\Helpers\General\CollectionHelper;
use App\Rules\CheckSchoolStatus;
use App\Rules\CheckUserCompetitionExist;
use App\Rules\CheckParticipantRegistrationOpen;
use App\Rules\CheckParticipantGrade;
class ParticipantsController extends Controller
{
    //if status lock country and teacher no update or create
    public function create (Request $request) {

        $request['role_id'] = auth()->user()->role_id;

        $competitions_id = collect($request['participant'])->pluck('competition_id')->filter()->toArray();

        $allCompetitionsGrades = count($competitions_id) == 0 ?: Competition::whereIn('id' , $competitions_id)->get()->mapWithKeys(function ($item,$key) {
            return [$item['id'] => $item['allowed_grades']];
        })->toArray();

        count($allCompetitionsGrades) > 0 ?: abort(404,'Invalid Competition');;

        $competitionsGrades = explode(",",$allCompetitionsGrades[$request['participant'][0]['competition_id']]);

        switch(auth()->user()->role_id) {
            case 1:
                $competitionPartnerValidation = 'required|integer|exists:competition_partner,id';
                break;
            case 2:
            case 4:
                $competitionPartnerValidation = ["required","integer",Rule::exists('competition_partner',"id")->where(function ($query) {
                    $query->whereIn('status', ['active','ready']);
                })];
                break;
            default:
                $competitionPartnerValidation = ["required","integer",Rule::exists('competition_partner',"id")->where(function ($query) {
                    $query->where('status', 'active');
                })];
                break;
        }

        Countries::all()->map(function ($row) use(&$ccode) {
            $ccode[$row->id] = $row->Dial;
        });

        $validate = array(
            "role_id" => "nullable",
            "participant.*.competition_id" => ["required","integer","exists:competition,id", new CheckParticipantRegistrationOpen],
            "participant.*.country_id" => 'required|integer|exists:all_countries,id',
            "participant.*.name" => "required|regex:/^[\'\;\.\,\s\(\)\[\]\w-]*$/",
            "participant.*.class" => "max:20",
            "participant.*.grade" => ["required","integer","min:1","max:99",Rule::in($competitionsGrades)],
            "participant.*.competition_partner_id" => $competitionPartnerValidation,
            "participant.*.for_partner" => "required|boolean",
            "participant.*.tuition_centre_id" => ['exclude_if:*.for_partner,1','required_if:*.school_id,null','integer','nullable',new CheckSchoolStatus(1)],
            "participant.*.school_id" => ['exclude_if:role_id,3,5','required_if:*.tuition_centre_id,null','nullable','integer',new CheckSchoolStatus],
            "participant.*.parent_userid" => ["integer",new CheckUserCompetitionExist(auth()->user()->country_id)],
        );

        if(auth()->user()->role_id == 1) {
            $validate["participant.*.parent_userid"] = ["required","integer",new CheckUserCompetitionExist()];
        }

        if(in_array(auth()->user()->role_id,[2,3,4,5]) ) {
            unset($validate["participant.*.country_id"]);// country partner and teacher does not required to validate country id
        }

        $validated = $request->validate($validate);

        dd(1);

        try {

            $returnData = [];
            $indexNoList = [];
            $validated = collect($validated['participant'])->map(function ($row) use($ccode,&$indexNoList,&$returnData) {

                if(in_array(auth()->user()->role_id,[3,5]) ) {
                    $private = School::findOrFail(auth()->user()->school_id)->private;

                    if($private) {
                        $row["tuition_centre_id"] = auth()->user()->school_id;
                        $row["school_id"] = $row["school_id"] ?? null;
                    }
                    else
                    {
                        $row["school_id"] = auth()->user()->school_id;
                    }
                }

                if(!empty($row["for_partner"]))  { //if
                    $row["tuition_centre_id"] = User::where('id',$row["parent_userid"])
                        ->get()
                        ->pluck('school_id')
                        ->first();
                }

                $country_id  = in_array(auth()->user()->role_id , [2,3,4,5])? auth()->user()->country_id : $row["country_id"];
                $CountryCode = $ccode[$country_id];
                $private = isset($row["tuition_centre_id"]) ? 1 : 0;
                $temp = str_pad($CountryCode,3,"0",STR_PAD_LEFT).substr( date("y"), -2). $private;
                $query = Participants::where("index_no","like", $temp. "%")
                    ->get()
                    ->pluck('index_no')
                    ->sortDesc()
                    ->first();

                /*Generate index no.*/
                $indexNo = $query ? $query + 1  : ($temp * 1000000) + 1;

                if(!isset($indexNoList[$temp])) {
                    $indexNoList[$temp] = [];
                }

                if(!in_array($indexNo,$indexNoList[$temp])) {
                    $indexNoList[$temp][] = $indexNo;
                } else {
                    $indexNo = last($indexNoList[$temp]) + 1;
                    $indexNoList[$temp][] = $indexNo;
                }


                $row["country_id"] = $country_id;
                $row["parent_userid"]  = isset($row["parent_userid"]) ? $row["parent_userid"] : auth()->user()->id;
                $row["created_by_userid"] =  auth()->user()->id; //assign entry creator user id
                $row["index_no"] = str_pad($indexNo,12,"0",STR_PAD_LEFT);
                $row["passkey"] = Str::random(8);
                $row["password"] = Hash::make($row["passkey"]);
                $row["created_at"] = date('Y-m-d H:i:s');

                $returnData[] = $row;
                unset($returnData[count($returnData)-1]['password']);
                unset($row['passkey']);
                unset($row['competition_id']);
                unset($row['for_partner']);

                return $row;
            })->toArray();

            Participants::insert($validated);;

            return response()->json([
                "status" => 201,
                "message" => "create Participants successful",
                "data" => $returnData
            ]);
        }

        catch(ModelNotFoundException $e){
            // do task when error
            return response()->json([
                "status" => 500,
                "message" => "Create Participants unsuccessful" . $e
            ]);
        }
        catch(QueryException $e) {
            return response()->json([
                "status" => 500,
                "message" => "Create Participants unsuccessful" . $e,
            ]);
        }

//        catch(QueryException $e) {
//            return response()->json([
//                "status" => 500,
//                "message" => "Create Participants unsuccessful". $e,
//            ]);
//        }
    }

    public function list (Request $request) {
        try {
            $validated = $request->validate([
                'index_no' => 'integer',
                'country_id' => 'integer',
                'organization_id' => 'integer',
                'competition_partner_id' => 'integer',
                'competition_id' => 'integer',
                'school_id' => 'integer',
                'status' => 'alpha',
                'private' => 'boolean',
                'limits' => 'integer|min:10|max:50',
                'page' => 'integer',
                'search' => 'max:255'
            ]);

            $limits = $request->limits ? $request->limits : 10;
            $searchKey = isset($validated['search']) ? $validated['search'] : null;
            $eagerload = ['competition_partner.competition:id,name,alias','competition_partner.partner:id,name','tuition_centre:id,name','parent_user.organization','created_by:id,name','modified_by:id,name'];

            $countries = Countries::all()->keyBy('id')->toArray();
            $organizationPartnerId = User::where(['organization_id' => auth()->user()->organization_id, 'country_id' => auth()->user()->country_id])->get()->pluck('id')->toArray();

            $participantModel = Participants::with($eagerload)
                ->AcceptRequest(['status', 'grade', 'country_id', 'index_no', 'competition_partner_id']);

            switch(auth()->user()->role_id) {
                case 2:
                case 4:
                    $participantModel->whereIn("parent_userid", $organizationPartnerId);
                break;
                case 3:
                case 5:
                    $participantModel->whereIn("parent_userid", $organizationPartnerId)->where("tuition_centre_id" , auth()->user()->school_id)
                        ->orWhere("school_id" , auth()->user()->school_id);
                    break;
            }

            /* if filter by private school */
            if(isset($request['private'])) {
                if($request['private']) {
                    $participantModel->whereNull("school_id");
                }
                else {
                    $participantModel->whereNull("tuition_centre_id");
                }
            }

            $returnFiltered = $participantModel->filter()->get();

            $participantCollection = collect($returnFiltered)->map(function ($item) use ($countries,$validated) { // match country id and add country name into the collection

                if ($item['country_id']) {
                    $item['country_name'] = $countries[$item['country_id']]['display_name'];
                }

                if ($item['school_id']) {
                    $item['school_name'] = $item['school']['name'];
                }

                if ($item['tuition_centre_id']) {
                    $item['tuition_centre_name'] = $item['tuition_centre']['name'];
                }


                $item['private'] = isset($item['tuition_centre_id']) ? 1 : 0;
                $item['teacher'] = $item['parent_user']['id'] != $item['competition_partner']['partner']['id'] ? $item['parent_user']['name'] : null;
                $item['competition_name'] = $item['competition_partner']['competition']['name'];
                $item['competition_alias'] = $item['competition_partner']['competition']['alias'];
                $item['competition_id'] = $item['competition_partner']['competition']['id'];
                $item['competition_partner_id'] = $item['competition_partner']['id'];
                $item['partner_name'] = $item['competition_partner']['partner']['name'];
                $item['organization_id'] = $item['parent_user']['organization']['id'];
                $item['organization_name'] = $item['parent_user']['organization']['name'];
                $item['created_by_user'] = $item['created_by']['name'];
                $item['modified_by_user'] = isset($item['modified_by']['name']) ? $item['modified_by']['name'] : null;



                unset($item['competition']); //remove nested roles
                unset($item['competition_partner']); //remove nested competition_partner
                unset($item['parent_user']); //remove nested parent user
                unset($item['school']); //remove nested school
                unset($item['tuition_centre']); //remove nested tuition centre
                unset($item['created_by']); //remove nested school
                unset($item['modified_by']); //remove nested school

                if(isset($validated['organization_id'])) { //filter by organization id, since participant table dont dont organization_id, filter it row by row during mapping collection.
                    if($item['organization_id'] == $validated['organization_id']) {
                        return $item;
                    }
                } else {
                    return $item;
                }

            })->filter();

            /**
             * Lists of availabe filters
             */
            $availUserStatus = $participantCollection->map(function ($item) {
                return $item['status'];
            })->unique()->values();
            $availGrade = $participantCollection->map(function ($item) {
                return $item['grade'];
            })->unique()->values();
            $availPrivate = $participantCollection->map(function ($item) {
                return $item['private'];
            })->unique()->values();
            $availCountry = $participantCollection->map(function ($item) {
                return ["id" => $item['country_id'], "name" => $item['country_name']];
            })->unique()->values();
//            $availPartnerCompetition = $participantCollection->map(function ($item) {
//                return ["id" => $item['competition_partner_id'], "name" => $item['competition_name']];
//            })->unique()->values();
            $availCompetition = $participantCollection->map(function ($item) {
                return ["id" => $item['competition_id'], "name" => $item['competition_name']];
            })->unique()->values();
            $availOrganization = $participantCollection->map(function ($item) {
                return ['id' => $item['organization_id'], 'name' => $item['organization_name']];
            })->unique()->values();

            /**
             * EOL Lists of availabe filters
             */

            if($request->has('competition_id')) {
                /** addition filtering done in collection**/
                $participantCollection = $this->filterCollectionList($participantCollection,[
                    "0,competition_id" => $request->competition_id ?? false, // 0 = non-nested, 1 = nested
                ],"competition_id"
                );
            }

            $availForSearch = array("name", "index_no", "school", "tuition_centre");
            $participantList = CollectionHelper::searchCollection($searchKey, $participantCollection, $availForSearch, $limits);
            $data = array("filterOptions" => ['status' => $availUserStatus,'organization' => $availOrganization, 'grade' => $availGrade, 'private' => $availPrivate, 'countries' => $availCountry, 'competition' => $availCompetition,], "participantList" => $participantList);

            return response()->json([
                "status" => 200,
                "data" => $data
            ]);
        }
        catch(QueryException $e) {
            return response()->json([
                "status" => 500,
                "message" => "Retrieve participants retrieve unsuccessful".$e
            ]);
        }
        catch(ModelNotFoundException $e){
            // do task when error
            return response()->json([
                "status" => 500,
                "message" => "Retrieve users participants unsuccessful"
            ]);
        }
//        catch (\Exception $e) {
//            return response()->json([
//                "status" => 500,
//                "message" => "Retrieve users retrieve unsuccessful". $e
//            ]);
//        }
    }

    public function update (Request $request) {
        try {
            //password must English uppercase characters (A – Z), English lowercase characters (a – z), Base 10 digits (0 – 9), Non-alphanumeric (For example: !, $, #, or %), Unicode characters

            $vaildate = array(
                'name' => 'required|regex:/^[\.\,\s\(\)\[\]\w-]*$/|min:3|max:255',
                'class' => "max:20",
                'grade' => ['required','integer','min:1','max:99',new CheckParticipantGrade],
                'password' => ['confirmed','min:8','regex:/^.*(?=.{3,})(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[\d\x])(?=.*[!$#%@]).*$/'],
            );

            switch(auth()->user()->role_id) {
                case 1:
                    $vaildate['id'] = ["required",Rule::exists('participants','id'),"integer"];
                    break;
                case 2:
                case 3:
                case 4:
                case 5:
                    $organizationPartnerId = User::where(['organization_id' => auth()->user()->organization_id, 'country_id' => auth()->user()->country_id])->get()->pluck('id')->toArray();
                    $vaildate['id'] = ["required","integer",Rule::exists('participants','id')->whereIn("parent_userid", $organizationPartnerId)];
                    break;
                default:

                    $parent_id = auth()->user()->parent_id;
                    $partner = User::find(auth()->user()->id);

                    while($parent_id !== null){
                        $parent_id = User::find($parent_id)->parent_id;
                        if($parent_id) {
                            if(User::find($parent_id)->role_id == 2) {
                                $partner = User::find($parent_id);
                            }
                        }
                    }

                    $organizationId = $partner->organization_id;
                    $organizationPartnerId = User::where(['organization_id', $organizationId, 'country_id' => $partner->country_id])->get()->pluck('id')->toArray();
                    $vaildate['id'] = ["required","integer",Rule::exists('participants','id')->whereIn("parent_userid", $organizationPartnerId)->where("school_id", auth()->user()->school_id)];
                    break;
            }

            $validated = $request->validate($vaildate);

            $participantObject = new Participants;
            $participant = $participantObject::find($validated['id']);
            $participant->name = $validated['name'];
            $participant->last_modified_userid = auth()->user()->id;
            $participant->grade = $validated['grade'];
            $participant->class = $validated['class'];

            if(!empty($request->password))
            {
                $participant->password = Hash::make($validated["password"]);
            }

            $participant->save();

            return response()->json([
                "status" => 200 ,
                "message" => "participannt update successful"
            ]);
        }
        catch(ModelNotFoundException $e){
            // do task when error
            return response()->json([
                "status" => 500,
                "message" => "participannt update unsuccessful" . $e
            ]);
        }
//        catch (\Exception $e) {
//            return response()->json([
//                "status" => 500,
//                "message" => "participannt update unsuccessful" . $e
//            ]);
//        }
    }

    public function delete (Request $request) {

        $validate = array(
            "id" => "array",
            "id.*" => ["required", "integer", Rule::exists("participants", "id")
                ->where("status", "active")]
        );

        switch(auth()->user()->role_id) {
            case 2:
            case 4:
            $organizationPartnerId = User::where(['organization_id' => auth()->user()->organization_id, 'country_id' => auth()->user()->country_id])->get()->pluck('id')->toArray();
            $validate["id.*"] = ["required", "integer", Rule::exists("participants", "id")
                ->where("status", "active")
                ->whereIn('parent_userid', $organizationPartnerId)
            ];
            break;
            case 3:
            case 5:
            $organizationId = User::find(auth()->user()->id)->organization_id;
            $organizationPartnerId = User::where(['organization_id' => $organizationId, 'country_id' => auth()->user()->country_id])->get()->pluck('id')->toArray();
            $validate["id.*"] = ["required", "integer", Rule::exists("participants", "id")
                ->where("school_id", auth()->user()->school_id)
                ->where("status", "active")
                ->whereIn('parent_userid', $organizationPartnerId)
            ];
        }

        $validated = $request->validate($validate);

        try {
            $deletedRecords = Participants::destroy($validated['id']);

            return response()->json([
                "status" => 200,
                "message" => $deletedRecords ." Participants delete successful"
            ]);
        }
        catch(QueryException $e) {
            return response()->json([
                "status" => 200,
                "message" => "Participants delete unsuccessful",
            ]);
        }
        catch(ModelNotFoundException $e){
            // do task when error
            return response()->json([
                "status" => 500,
                "message" => "Participants delete unsuccessful"
            ]);
        }
//        catch (\Exception $e) {
//            return response()->json([
//                "status" => 500,
//                "message" => "Participants delete unsuccessful"
//            ]);
//        }

    }

    public function swapIndex (Request $request) {

        try {
            $validated = $request->validate([
                "index" => 'required|integer|exists:participants,index_no',
                "indexToSwap" => 'required|integer|exists:participants,index_no',
            ]);

            $results = Participants::whereIn("index_no",[$validated["index"],$validated["indexToSwap"]])
                ->get();

            if(count($results) == 2) {
                if($results[0]->country_id == $results[1]->country_id && $results[0]->competition_id == $results[1]->competition_id) {
                    $index = Participants::find($results[0])->first();
                    $indexToSwap = Participants::find($results[1])->first();

                    $temp1 = $index->index_no;
                    $temp2 = $indexToSwap->index_no;

                    $index->index_no = "000000000000";
                    $index->save();

                    $indexToSwap->index_no = $temp1;
                    $indexToSwap->save();

                    $index->index_no = $temp2;
                    $index->save();

                }

                return response()->json([
                    "status" => 200,
                    "message" => "Participant index number swap successful",
                ]);
            }

            return response()->json([
                "status" => 400,
                "message" => "Invaild index number"
            ]);
        }
        catch(ModelNotFoundException $e){
            // do task when error
            return response()->json([
                "status" => 500,
                "message" => "Participants index number swap unsuccessful" .$e
            ]);
        }
    }
}
